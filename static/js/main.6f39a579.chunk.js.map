{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["green","Container","styled","main","Panel","div","Results","H1","h1","H2","h2","IconAndTitle","Section","section","Input","input","Button","button","spin","keyframes","LoadingContainer","Icon","icon","color","style","marginRight","LinkIcon","url","href","marginLeft","target","rel","faExternalLinkAlt","cursor","openingTermsMilestones","pgnToObject","pgn","str","featuresToObject","match","reduce","acc","feature","splitF","replace","split","Moves","cur","moveNumber","move","App","useState","data","setData","error","setError","loading","setLoading","userInput","setUserInput","mostCommonOpening","setMostCommonOpening","biggestUpset","setBiggestUpset","winner","setWinner","winningOutcomes","setWinningOutcomes","mostMovesGame","setMostMovesGame","fewestMovesGame","setFewestMovesGame","getData","evt","a","preventDefault","slug","axios","get","initialData","rounds","roundData","games","groups","nonArenaData","Error","useEffect","openings","map","game","eco","console","log","parsedOpenings","opening","milestones","milestone","includes","substring","indexOf","length","removeAfterIfExists","parseOpenings","_","compact","mostCommonOpeningsObj","value","key","count","getMostCommonOpening","countBy","winningRating","white","result","rating","black","losingRating","winningRatingExisting","players","find","player","is_winner","place_finish","username","gameOutcomes","draw","win","timeout","resigned","checkmated","pick","gameWithMostMoves","pgnToObjCur","pgnToObjAcc","nth","Object","keys","gameWithFewestMoves","onSubmit","onChange","type","faSpinner","faTrophy","faChessPawn","faFlagCheckered","width","margin","label","dataEntry","title","labelStyle","fontSize","faSurprise","faWalking","faRunning","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6f39a579.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport _ from \"lodash\";\nimport { PieChart } from \"react-minimal-pie-chart\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faTrophy,\n  faChessPawn,\n  faSurprise,\n  faRunning,\n  faWalking,\n  faFlagCheckered,\n  faSpinner,\n  faExternalLinkAlt,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport styled, { keyframes } from \"styled-components\";\n\nconst green = \"#6E9C47\";\n\nconst Container = styled.main`\n  display: flex;\n  justify-content: center;\n  color: #eee;\n  background-color: #000;\n`;\n\nconst Panel = styled.div`\n  text-align: center;\n  background-color: #444;\n  margin: 30px 0;\n  padding: 20px;\n`;\n\nconst Results = styled.div`\n  margin-top: 70px;\n`;\n\nconst H1 = styled.h1`\n  font-family: \"Fjalla One\", sans-serif;\n  text-transform: uppercase;\n  font-size: 40px;\n  margin-bottom: 40px;\n`;\n\nconst H2 = styled.h2`\n  font-family: \"Fjalla One\", sans-serif;\n  text-transform: uppercase;\n`;\n\nconst IconAndTitle = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-bottom: 20px;\n  font-size: 30px;\n`;\n\nconst Section = styled.section`\n  margin-top: 30px;\n  margin-bottom: 60px;\n`;\n\nconst Input = styled.input`\n  width: 100%;\n  border: none;\n  margin: 10px 0;\n`;\n\nconst Button = styled.button`\n  font-family: \"Fjalla One\", sans-serif;\n  text-transform: uppercase;\n  border: none;\n  background-color: ${green};\n  color: #eee;\n  font-size: 15px;\n  border-radius: 4px;\n  border-bottom: 3px solid #4f773b;\n  margin-top: 10px;\n  padding: 5px 10px;\n  outline: none;\n  cursor: pointer;\n`;\n\nconst spin = keyframes`\n  from {\n      transform:rotate(0deg);\n  }\n  to {\n      transform:rotate(360deg);\n  }\n`;\n\nconst LoadingContainer = styled.div`\n  animation-name: ${spin};\n  animation-duration: 1000ms;\n  animation-iteration-count: infinite;\n  animation-timing-function: linear;\n  margin-top: 20px;\n`;\nconst Icon = ({ icon }) => {\n  return (\n    <FontAwesomeIcon\n      icon={icon}\n      color={green}\n      style={{ marginRight: \"10px\" }}\n    />\n  );\n};\nconst LinkIcon = ({ url }) => {\n  return (\n    <a\n      href={url}\n      style={{ marginLeft: \"10px\" }}\n      target=\"_blank\"\n      rel=\"noreferrer\"\n    >\n      <FontAwesomeIcon icon={faExternalLinkAlt} style={{ cursor: \"pointer\" }} />\n    </a>\n  );\n};\nconst openingTermsMilestones = [\n  \"Opening\",\n  \"Defense\",\n  \"Game\",\n  \"Accepted\",\n  \"Declined\",\n];\n\nconst removeAfterIfExists = (opening, milestones) => {\n  return milestones.reduce((acc, milestone) => {\n    if (acc.includes(milestone)) {\n      return acc.substring(0, acc.indexOf(milestone) + milestone.length);\n    } else {\n      return acc;\n    }\n  }, opening);\n};\n\nconst getMostCommonOpening = (mostCommonOpeningsObj) => {\n  return _.reduce(\n    mostCommonOpeningsObj,\n    (acc, value, key) => {\n      if (value > acc.count) {\n        return {\n          opening: key,\n          count: value,\n        };\n      } else {\n        return acc;\n      }\n    },\n    { opening: \"\", count: 0 }\n  );\n};\n\nconst parseOpenings = (openings) => {\n  return openings.map((opening) => {\n    const stripped = opening\n      .replace(\"https://www.chess.com/openings/\", \"\")\n      .replace(\"-\", \" \");\n\n    const removedAfterMilestones = removeAfterIfExists(\n      stripped,\n      openingTermsMilestones\n    );\n    return removedAfterMilestones;\n  });\n};\n\nconst movesToObject = (str) => {\n  const onlyMoves = str.split(/\\n\\n/g)[1];\n  const splitBySpace = onlyMoves.split(\"  \");\n  const obj = splitBySpace.reduce((acc, cur) => {\n    const [moveNumber, move] = cur.split(\" \");\n    acc[moveNumber] = move;\n    return acc;\n  }, {});\n  return obj;\n};\n\nconst pgnToObject = (pgn) => {\n  const splitFeatures = pgn.match(/\\[.*?]/gm);\n  const featuresToObject = splitFeatures.reduce((acc, feature) => {\n    const stripped = feature.replace(/[\\[\\]\\\"]/g, \"\");\n\n    const splitF = stripped.split(/ (.+)/);\n    acc[splitF[0]] = splitF[1];\n    return acc;\n  }, {});\n\n  const featuresToObjectWithMoves = {\n    ...featuresToObject,\n    Moves: movesToObject(pgn),\n  };\n  return featuresToObjectWithMoves;\n};\n\nfunction App() {\n  const [data, setData] = useState();\n  const [error, setError] = useState();\n  const [loading, setLoading] = useState();\n  const [userInput, setUserInput] = useState();\n\n  const [mostCommonOpening, setMostCommonOpening] = useState();\n  const [biggestUpset, setBiggestUpset] = useState();\n  const [winner, setWinner] = useState();\n  const [winningOutcomes, setWinningOutcomes] = useState();\n  const [mostMovesGame, setMostMovesGame] = useState();\n  const [fewestMovesGame, setFewestMovesGame] = useState();\n\n  const getData = async (evt) => {\n    evt.preventDefault();\n    setLoading(true);\n    const slug = userInput.replace(/(.*\\/)*/, \"\");\n    try {\n      const initialData = await axios.get(\n        `https://api.chess.com/pub/tournament/${slug}`\n      );\n      const roundData = await axios.get(initialData.data.rounds[0]);\n\n      if (roundData.data.games) {\n        setData(roundData.data);\n      } else if (roundData.data.groups) {\n        const nonArenaData = await axios.get(roundData.data.groups[0]);\n        setData(nonArenaData.data);\n      } else {\n        throw new Error();\n      }\n    } catch (err) {\n      setError(true);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (data) {\n      const openings = data.games.map((game) => {\n        return game.eco;\n      });\n      console.log(\n        \"🚀 ~ file: App.js ~ line 231 ~ openings ~ openings\",\n        openings\n      );\n\n      const parsedOpenings = parseOpenings(_.compact(openings));\n      const mostCommonOpeningsObj = _.countBy(parsedOpenings);\n      const mostCommonOpening = getMostCommonOpening(mostCommonOpeningsObj);\n      setMostCommonOpening(mostCommonOpening);\n\n      const biggestUpset = data.games.reduce((acc, game) => {\n        const winningRating =\n          game.white.result === \"win\"\n            ? game.white.rating\n            : game.black.result === \"win\"\n            ? game.black.rating\n            : null;\n\n        if (!winningRating) return acc;\n\n        const losingRating =\n          game.white.result === \"win\"\n            ? game.black.rating\n            : game.black.result === \"win\"\n            ? game.white.rating\n            : null;\n\n        const winningRatingExisting =\n          acc.white.result === \"win\"\n            ? acc.white.rating\n            : acc.black.result === \"win\"\n            ? acc.black.rating\n            : null;\n        const losingRatingExisting =\n          acc.white.result === \"win\"\n            ? acc.black.rating\n            : acc.black.result === \"win\"\n            ? acc.white.rating\n            : null;\n\n        const gap = losingRating - winningRating;\n\n        const gapExisting = losingRatingExisting - winningRatingExisting;\n\n        return gap > gapExisting ? game : acc;\n      }, data.games[0]);\n      setBiggestUpset(biggestUpset);\n\n      const winner = data.players.find((player) => {\n        if (_.get(player, \"is_winner\")) {\n          return player.is_winner;\n        } else {\n          return player.place_finish === 1;\n        }\n      }).username;\n      setWinner(winner);\n\n      const gameOutcomes = data.games.reduce(\n        (acc, game) => {\n          acc[game.black.result] += 1;\n          acc[game.white.result] += 1;\n          return acc;\n        },\n        { draw: 0, win: 0, timeout: 0, resigned: 0, checkmated: 0 }\n      );\n      setWinningOutcomes(\n        _.pick(gameOutcomes, [\"checkmated\", \"timeout\", \"resigned\"])\n      );\n\n      const gameWithMostMoves = data.games.reduce((acc, game) => {\n        const pgnToObjCur = pgnToObject(\n          game.pgn.replace(/\\{\\[%clk.+?(?= |\\n)/gims, \"\")\n        );\n        const pgnToObjAcc = pgnToObject(\n          acc.pgn.replace(/\\{\\[%clk.+?(?= |\\n)/gims, \"\")\n        );\n\n        const movesCountCur = _.replace(\n          _.nth(Object.keys(pgnToObjCur.Moves), -2),\n          /\\./g,\n          \"\"\n        );\n\n        const movesCountAcc = _.replace(\n          _.nth(Object.keys(pgnToObjAcc.Moves), -2),\n          /\\./g,\n          \"\"\n        );\n\n        return movesCountCur > movesCountAcc ? game : acc;\n      }, data.games[0]);\n\n      setMostMovesGame(gameWithMostMoves);\n\n      const gameWithFewestMoves = data.games.reduce((acc, game) => {\n        const pgnToObjCur = pgnToObject(\n          game.pgn.replace(/\\{\\[%clk.+?(?= |\\n)/gims, \"\")\n        );\n        const pgnToObjAcc = pgnToObject(\n          acc.pgn.replace(/\\{\\[%clk.+?(?= |\\n)/gims, \"\")\n        );\n\n        const movesCountCur = _.replace(\n          _.nth(Object.keys(pgnToObjCur.Moves), -2),\n          /\\./g,\n          \"\"\n        );\n\n        const movesCountAcc = _.replace(\n          _.nth(Object.keys(pgnToObjAcc.Moves), -2),\n          /\\./g,\n          \"\"\n        );\n\n        return movesCountCur < movesCountAcc ? game : acc;\n      }, data.games[0]);\n\n      setFewestMovesGame(gameWithFewestMoves);\n    }\n  }, [data]);\n\n  if (error) {\n    return <div>Sorry, something went wrong. Please try again later.</div>;\n  }\n\n  return (\n    <Container>\n      <Panel>\n        <H1>Chess.com Tournament Stats</H1>\n        <H2>Enter a tournament URL:</H2>\n\n        <form onSubmit={getData}>\n          <Input onChange={(evt) => setUserInput(evt.target.value)}></Input>\n          <Button type=\"submit\">See Stats</Button>\n        </form>\n\n        {loading ? (\n          <LoadingContainer>\n            <FontAwesomeIcon icon={faSpinner} color=\"rgba(255,255,255,0.3)\" />\n          </LoadingContainer>\n        ) : data ? (\n          <Results>\n            {winner && (\n              <Section>\n                <IconAndTitle>\n                  <Icon icon={faTrophy} />\n                  <H2>Winner</H2>\n                </IconAndTitle>\n                <p>{winner}</p>\n              </Section>\n            )}\n            {_.get(mostCommonOpening, \"opening\") > 0 && (\n              <Section>\n                <IconAndTitle>\n                  <Icon icon={faChessPawn} />\n                  <H2>Most Common Opening</H2>\n                </IconAndTitle>\n                <p>\n                  {mostCommonOpening.opening} - played {mostCommonOpening.count}{\" \"}\n                  times\n                </p>\n              </Section>\n            )}\n            {winningOutcomes && (\n              <Section>\n                <IconAndTitle>\n                  <Icon icon={faFlagCheckered} />\n                  <H2>Result Types</H2>\n                </IconAndTitle>\n                <div style={{ width: 200, margin: \"auto\" }}>\n                  <PieChart\n                    label={({ dataEntry }) => {\n                      return `${dataEntry.title}: ${dataEntry.value}`;\n                    }}\n                    labelStyle={{ fontSize: \"5px\" }}\n                    data={[\n                      {\n                        title: \"Checkmated\",\n                        value: winningOutcomes.checkmated,\n                        color: \"rgba(255,255,255,0.5)\",\n                      },\n                      {\n                        title: \"Timeout\",\n                        value: winningOutcomes.timeout,\n                        color: \"rgba(255,255,255,0.2)\",\n                      },\n                      {\n                        title: \"Resigned\",\n                        value: winningOutcomes.resigned,\n                        color: \"rgba(255,255,255,0.3)\",\n                      },\n                    ]}\n                  />\n                </div>\n              </Section>\n            )}\n            {biggestUpset && (\n              <Section>\n                <IconAndTitle>\n                  <Icon icon={faSurprise} />\n                  <H2>Biggest Upset</H2>\n                </IconAndTitle>\n                <p>\n                  {biggestUpset.white.username} ({biggestUpset.white.rating}) vs{\" \"}\n                  {biggestUpset.black.username} ({biggestUpset.black.rating})\n                  <LinkIcon url={biggestUpset.url} />\n                </p>\n              </Section>\n            )}\n            {mostMovesGame && (\n              <Section>\n                <IconAndTitle>\n                  <Icon icon={faWalking} />\n                  <H2>Marathon</H2>\n                </IconAndTitle>\n                <p>\n                  {mostMovesGame.white.username} vs{\" \"}\n                  {mostMovesGame.black.username} had the most moves!\n                  <LinkIcon url={mostMovesGame.url} />\n                </p>\n              </Section>\n            )}\n            {fewestMovesGame && (\n              <Section>\n                <IconAndTitle>\n                  <Icon icon={faRunning} />\n                  <H2>Sprint</H2>\n                </IconAndTitle>\n                <p>\n                  {fewestMovesGame.white.username} vs{\" \"}\n                  {fewestMovesGame.black.username} had the fewest moves!\n                  <LinkIcon url={fewestMovesGame.url} />\n                </p>\n              </Section>\n            )}\n          </Results>\n        ) : null}\n      </Panel>\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}